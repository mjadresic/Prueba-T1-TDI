{"ast":null,"code":"var _jsxFileName = \"D:\\\\2024-1\\\\Taller de Integracion\\\\Prueba-T1-TDI\\\\frontend\\\\src\\\\components\\\\HomePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HomePage = () => {\n  _s();\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [image, setImage] = useState('');\n  const [posts, setPosts] = useState([]);\n  const [showPostResult, setShowPostResult] = useState(false);\n  const [showUserResult, setShowUserResult] = useState(false);\n  const [searchTermPost, setSearchTermPost] = useState('');\n  const [searchResultsPost, setSearchResultsPost] = useState([]);\n  const [searchTermUser, setSearchTermUser] = useState('');\n  const [searchResultsUser, setSearchResultsUser] = useState([]);\n  const [postComments, setPostComments] = useState({});\n  const [newComments, setNewComments] = useState({});\n  const currentUser = JSON.parse(localStorage.getItem('currentUser'));\n  const userId = currentUser.user.id;\n  const fetchAllPosts = async () => {\n    try {\n      const response = await fetch('https://prueba-t1-tdi.onrender.com/posts');\n      if (!response.ok) {\n        throw new Error('Failed to fetch All posts');\n      }\n      const postData = await response.json();\n\n      // Obtener los nombres de usuario para cada ID de usuario en los posts\n      const postsWithUsernames = await Promise.all(postData.map(async post => {\n        try {\n          const userResponse = await fetch(`https://prueba-t1-tdi.onrender.com/users/${post.userId}`);\n          if (!userResponse.ok) {\n            throw new Error('Failed to fetch user data');\n          }\n          const userData = await userResponse.json();\n          return {\n            ...post,\n            username: userData.username\n          };\n        } catch (error) {\n          console.error('Error fetching user data:', error);\n          return post;\n        }\n      }));\n\n      // Ordenar las publicaciones de más reciente a más antiguo\n      postsWithUsernames.sort((a, b) => {\n        const dateA = new Date(a.created);\n        const dateB = new Date(b.created);\n        return dateB - dateA;\n      });\n\n      // Obtener comentarios de cada publicación\n      const comments = {};\n      for (const post of postsWithUsernames) {\n        const commentsResponse = await fetch(`http://localhost:8000/posts/${post.id}/comments`);\n        if (!commentsResponse.ok) {\n          throw new Error(`Failed to fetch comments for post ${post.id}`);\n        }\n        const postComments = await commentsResponse.json();\n\n        // Obtener el nombre de usuario para cada comentario\n        const commentsWithUsername = await Promise.all(postComments.map(async comment => {\n          try {\n            const username = await fetchUsernameById(comment.userId);\n            return {\n              ...comment,\n              username\n            };\n          } catch (error) {\n            console.error('Error fetching username:', error);\n            // Si hay un error al obtener el nombre de usuario, devolver el comentario sin nombre de usuario\n            return comment;\n          }\n        }));\n        comments[post.id] = commentsWithUsername;\n      }\n      setPosts(postsWithUsernames);\n      setPostComments(comments); // Actualizar el estado con los comentarios que incluyen nombres de usuario\n    } catch (error) {\n      console.error('Error fetching All posts:', error);\n    }\n  };\n\n  // Función para obtener el nombre de usuario por ID\n  const fetchUsernameById = async userId => {\n    try {\n      const response = await fetch(`http://localhost:8000/users/${userId}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch user data');\n      }\n      const userData = await response.json();\n      return userData.username;\n    } catch (error) {\n      console.error('Error fetching user data:', error);\n      return '';\n    }\n  };\n  const handleSearchPost = async () => {\n    try {\n      const response = await fetch(`http://localhost:8000/posts?title=${encodeURIComponent(searchTermPost)}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch posts');\n      }\n      const data = await response.json();\n      const filteredPosts = data.filter(post => post.title.toLowerCase() === searchTermPost.toLowerCase());\n      if (filteredPosts && filteredPosts.length > 0) {\n        setSearchResultsPost(filteredPosts);\n        setShowPostResult(true); // Hay resultados\n        console.log('Resultados:', filteredPosts);\n      } else {\n        console.log('No hay resultados');\n        setSearchResultsPost([]); // No hay resultados\n        setShowPostResult(true); // Mostrar el mensaje \"No hay publicaciones con ese título\"\n      }\n    } catch (error) {\n      console.error('Error fetching posts:', error);\n    }\n  };\n  const handleSearchUser = async () => {\n    try {\n      const response = await fetch(`http://localhost:8000/users?name=${searchTermUser}`);\n      if (!response.ok) {\n        if (response.status === 404) {\n          setSearchResultsUser([]); // No hay resultados\n          setShowUserResult(true);\n          return;\n        } else {\n          throw new Error('Failed to fetch users');\n        }\n      }\n      const data = await response.json();\n      setSearchResultsUser(data);\n      setShowUserResult(data.length > 0);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n    }\n  };\n  const leaveComment = async postId => {\n    try {\n      // Crear el objeto de comentario\n      const commentData = {\n        content: newComments[postId],\n        userId: userId,\n        postId: postId // Añadir el postId al objeto de comentario\n      };\n      console.log('Request body:', commentData); // Imprimir el cuerpo de la solicitud en la consola\n\n      const response = await fetch(`http://localhost:8000/posts/${postId}/comments`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(commentData) // Convertir el objeto en formato JSON y enviarlo en el cuerpo de la solicitud\n      });\n      if (!response.ok) {\n        throw new Error('Failed to leave a comment');\n      }\n\n      // Extraer el comentario creado del cuerpo de la respuesta\n      const createdComment = await response.json();\n\n      // Actualizar el estado de los comentarios de la publicación con el nombre de usuario\n      const username = await fetchUsernameById(userId);\n      const commentWithUsername = {\n        ...createdComment,\n        username\n      };\n\n      // Actualizar el estado de los comentarios de la publicación\n      setPostComments(prevComments => ({\n        ...prevComments,\n        [postId]: [...(prevComments[postId] || []), commentWithUsername]\n      }));\n\n      // Limpiar el campo de comentario asociado a la publicación\n      setNewComments({\n        ...newComments,\n        [postId]: ''\n      });\n    } catch (error) {\n      console.error('Error leaving a comment:', error);\n    }\n  };\n\n  // Función para manejar la creación de un nuevo post\n  const createNewPost = async () => {\n    try {\n      const response = await fetch('http://localhost:8000/posts', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          title,\n          content,\n          image,\n          userId\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create post');\n      }\n      // Recargar los posts después de crear uno nuevo\n      fetchAllPosts();\n      // Limpiar los campos del formulario después de crear el post\n      setTitle('');\n      setContent('');\n      setImage('');\n    } catch (error) {\n      console.error('Error creating post:', error);\n    }\n  };\n\n  // Función para manejar cambios en el campo de comentario\n  const handleCommentChange = (postId, comment) => {\n    setNewComments({\n      ...newComments,\n      [postId]: comment\n    });\n  };\n  useEffect(() => {\n    const updateCommentsWithUsername = async () => {\n      const updatedComments = {};\n      for (const postId in postComments) {\n        const commentsWithUsername = await Promise.all(postComments[postId].map(async comment => {\n          try {\n            const username = await fetchUsernameById(comment.userId);\n            return {\n              ...comment,\n              username\n            };\n          } catch (error) {\n            console.error('Error fetching username:', error);\n            // Si hay un error al obtener el nombre de usuario, devolver el comentario sin nombre de usuario\n            return comment;\n          }\n        }));\n        updatedComments[postId] = commentsWithUsername;\n      }\n      // Actualizar el estado solo si el valor ha cambiado\n      if (JSON.stringify(updatedComments) !== JSON.stringify(postComments)) {\n        setPostComments(updatedComments);\n      }\n    };\n    fetchAllPosts();\n    updateCommentsWithUsername();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-container\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"integram.png\",\n        alt: \"Profile\",\n        className: \"profile-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Boton para ver mi perfil:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: `/users/${currentUser.user.id}`,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          children: \"Ver mi perfil\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Barra de busqueda de publicacion:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Buscar publicaci\\xF3n\",\n        value: searchTermPost,\n        onChange: e => setSearchTermPost(e.target.value),\n        className: \"input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearchPost,\n        className: \"btn\",\n        children: \"Buscar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this), showPostResult && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Publicaciones encontradas:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"posts-section\",\n        style: {\n          maxHeight: '500px',\n          overflowY: 'auto'\n        },\n        children: searchResultsPost.length > 0 ? searchResultsPost.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"posts-container\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"content\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: [\"T\\xEDtulo: \", post.title]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 306,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Descripci\\xF3n: \", post.content]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 307,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Autor: \", /*#__PURE__*/_jsxDEV(Link, {\n                  to: `/users/${post.userId}`,\n                  children: post.username\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 308,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 308,\n                columnNumber: 23\n              }, this), post.image && /*#__PURE__*/_jsxDEV(\"img\", {\n                src: post.image,\n                alt: \"Post\",\n                className: \"image\",\n                style: {\n                  maxWidth: '100%',\n                  maxHeight: '200px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 309,\n                columnNumber: 38\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comments-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Comentarios:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"comments-list\",\n              children: postComments[post.id] && postComments[post.id].map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: /*#__PURE__*/_jsxDEV(Link, {\n                      to: `/users/${comment.userId}`,\n                      children: comment.username || 'Loading...'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 319,\n                      columnNumber: 31\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 318,\n                    columnNumber: 29\n                  }, this), \": \", comment.content]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 317,\n                  columnNumber: 27\n                }, this)\n              }, comment.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 316,\n                columnNumber: 25\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"comment-input\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                placeholder: \"Deja un comentario...\",\n                value: newComments[post.id] || '',\n                onChange: e => handleCommentChange(post.id, e.target.value),\n                className: \"input\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 328,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => leaveComment(post.id),\n                className: \"btn\",\n                children: \"Comentar\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 335,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 19\n          }, this)]\n        }, post.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 17\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No hay publicaciones con ese t\\xEDtulo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Barra de busqueda de usuario:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Buscar usuario\",\n        value: searchTermUser,\n        onChange: e => setSearchTermUser(e.target.value),\n        className: \"input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearchUser,\n        className: \"btn\",\n        children: \"Buscar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 7\n    }, this), showUserResult && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Usuarios encontrados:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 11\n      }, this), Array.isArray(searchResultsUser) && searchResultsUser.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: searchResultsUser.map(user => /*#__PURE__*/_jsxDEV(Link, {\n          to: `/users/${user.id}`,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn\",\n            children: user.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 19\n          }, this)\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 13\n      }, this) : searchResultsUser === \"No hay resultados\" ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No hay resultados\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No se encuentran usuarios con ese nombre\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Crear una nueva publicaci\\xF3n\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create-post\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Title\",\n        value: title,\n        onChange: e => setTitle(e.target.value),\n        className: \"input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Content\",\n        value: content,\n        onChange: e => setContent(e.target.value),\n        className: \"input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Image URL\",\n        value: image,\n        onChange: e => setImage(e.target.value),\n        className: \"input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: createNewPost,\n        className: \"btn\",\n        children: \"Create Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Publicaciones\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"posts-section\",\n      style: {\n        maxHeight: '500px',\n        overflowY: 'auto'\n      },\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"posts-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"T\\xEDtulo: \", post.title]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Descripci\\xF3n: \", post.content]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Autor: \", /*#__PURE__*/_jsxDEV(Link, {\n                to: `/users/${post.userId}`,\n                children: post.username\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 414,\n                columnNumber: 27\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 414,\n              columnNumber: 17\n            }, this), post.image && /*#__PURE__*/_jsxDEV(\"img\", {\n              src: post.image,\n              alt: \"Post\",\n              className: \"image\",\n              style: {\n                maxWidth: '100%',\n                maxHeight: '200px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 415,\n              columnNumber: 32\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comments-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Comentarios:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comments-list\",\n            children: postComments[post.id] && postComments[post.id].map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: /*#__PURE__*/_jsxDEV(Link, {\n                    to: `/users/${comment.userId}`,\n                    children: comment.username || 'Loading...'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 425,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 424,\n                  columnNumber: 23\n                }, this), \": \", comment.content]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 423,\n                columnNumber: 21\n              }, this)\n            }, comment.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 422,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comment-input\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Deja un comentario...\",\n              value: newComments[post.id] || '',\n              onChange: e => handleCommentChange(post.id, e.target.value),\n              className: \"input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 434,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => leaveComment(post.id),\n              className: \"btn\",\n              children: \"Comentar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 441,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 13\n        }, this)]\n      }, post.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 273,\n    columnNumber: 5\n  }, this);\n};\n_s(HomePage, \"MBWcHG4jioLodStPC4RUcibs9eY=\");\n_c = HomePage;\nexport default HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useState","useEffect","Link","jsxDEV","_jsxDEV","HomePage","_s","title","setTitle","content","setContent","image","setImage","posts","setPosts","showPostResult","setShowPostResult","showUserResult","setShowUserResult","searchTermPost","setSearchTermPost","searchResultsPost","setSearchResultsPost","searchTermUser","setSearchTermUser","searchResultsUser","setSearchResultsUser","postComments","setPostComments","newComments","setNewComments","currentUser","JSON","parse","localStorage","getItem","userId","user","id","fetchAllPosts","response","fetch","ok","Error","postData","json","postsWithUsernames","Promise","all","map","post","userResponse","userData","username","error","console","sort","a","b","dateA","Date","created","dateB","comments","commentsResponse","commentsWithUsername","comment","fetchUsernameById","handleSearchPost","encodeURIComponent","data","filteredPosts","filter","toLowerCase","length","log","handleSearchUser","status","leaveComment","postId","commentData","method","headers","body","stringify","createdComment","commentWithUsername","prevComments","createNewPost","handleCommentChange","updateCommentsWithUsername","updatedComments","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","to","type","placeholder","value","onChange","e","target","onClick","style","maxHeight","overflowY","maxWidth","Array","isArray","_c","$RefreshReg$"],"sources":["D:/2024-1/Taller de Integracion/Prueba-T1-TDI/frontend/src/components/HomePage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './styles.css'; \r\n\r\nconst HomePage = () => {\r\n  const [title, setTitle] = useState('');\r\n  const [content, setContent] = useState('');\r\n  const [image, setImage] = useState('');\r\n  const [posts, setPosts] = useState([]);\r\n  const [showPostResult, setShowPostResult] = useState(false);\r\n  const [showUserResult, setShowUserResult] = useState(false);\r\n  const [searchTermPost, setSearchTermPost] = useState('');\r\n  const [searchResultsPost, setSearchResultsPost] = useState([]);\r\n  const [searchTermUser, setSearchTermUser] = useState('');\r\n  const [searchResultsUser, setSearchResultsUser] = useState([]);\r\n  const [postComments, setPostComments] = useState({});\r\n  const [newComments, setNewComments] = useState({});\r\n\r\n  const currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n  const userId = currentUser.user.id;\r\n\r\n  const fetchAllPosts = async () => {\r\n    try {\r\n      const response = await fetch('https://prueba-t1-tdi.onrender.com/posts');\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch All posts');\r\n      }\r\n      const postData = await response.json();\r\n  \r\n      // Obtener los nombres de usuario para cada ID de usuario en los posts\r\n      const postsWithUsernames = await Promise.all(postData.map(async (post) => {\r\n        try {\r\n          const userResponse = await fetch(`https://prueba-t1-tdi.onrender.com/users/${post.userId}`);\r\n          if (!userResponse.ok) {\r\n            throw new Error('Failed to fetch user data');\r\n          }\r\n          const userData = await userResponse.json();\r\n          return {\r\n            ...post,\r\n            username: userData.username \r\n          };\r\n        } catch (error) {\r\n          console.error('Error fetching user data:', error);\r\n          return post; \r\n        }\r\n      }));\r\n  \r\n      // Ordenar las publicaciones de más reciente a más antiguo\r\n      postsWithUsernames.sort((a, b) => {\r\n        const dateA = new Date(a.created);\r\n        const dateB = new Date(b.created);\r\n        return dateB - dateA;\r\n      });\r\n  \r\n      // Obtener comentarios de cada publicación\r\n      const comments = {};\r\n      for (const post of postsWithUsernames) {\r\n        const commentsResponse = await fetch(`http://localhost:8000/posts/${post.id}/comments`);\r\n        if (!commentsResponse.ok) {\r\n          throw new Error(`Failed to fetch comments for post ${post.id}`);\r\n        }\r\n        const postComments = await commentsResponse.json();\r\n        \r\n        // Obtener el nombre de usuario para cada comentario\r\n        const commentsWithUsername = await Promise.all(postComments.map(async (comment) => {\r\n          try {\r\n            const username = await fetchUsernameById(comment.userId);\r\n            return {\r\n              ...comment,\r\n              username,\r\n            };\r\n          } catch (error) {\r\n            console.error('Error fetching username:', error);\r\n            // Si hay un error al obtener el nombre de usuario, devolver el comentario sin nombre de usuario\r\n            return comment;\r\n          }\r\n        }));\r\n  \r\n        comments[post.id] = commentsWithUsername;\r\n      }\r\n  \r\n      setPosts(postsWithUsernames);\r\n      setPostComments(comments); // Actualizar el estado con los comentarios que incluyen nombres de usuario\r\n    } catch (error) {\r\n      console.error('Error fetching All posts:', error);\r\n    }\r\n  };\r\n\r\n  // Función para obtener el nombre de usuario por ID\r\n  const fetchUsernameById = async (userId) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:8000/users/${userId}`);\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch user data');\r\n      }\r\n      const userData = await response.json();\r\n      return userData.username;\r\n    } catch (error) {\r\n      console.error('Error fetching user data:', error);\r\n      return ''; \r\n    }\r\n  };\r\n\r\n  const handleSearchPost = async () => {\r\n    try {\r\n      const response = await fetch(`http://localhost:8000/posts?title=${encodeURIComponent(searchTermPost)}`);\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch posts');\r\n      }\r\n      const data = await response.json();\r\n      const filteredPosts = data.filter(post => post.title.toLowerCase() === searchTermPost.toLowerCase());\r\n      if (filteredPosts && filteredPosts.length > 0) {\r\n        setSearchResultsPost(filteredPosts);\r\n        setShowPostResult(true); // Hay resultados\r\n        console.log('Resultados:', filteredPosts);\r\n      } else {\r\n        console.log('No hay resultados');\r\n        setSearchResultsPost([]); // No hay resultados\r\n        setShowPostResult(true); // Mostrar el mensaje \"No hay publicaciones con ese título\"\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching posts:', error);\r\n    }\r\n  };\r\n\r\n  const handleSearchUser = async () => {\r\n    try {\r\n      const response = await fetch(`http://localhost:8000/users?name=${searchTermUser}`);\r\n      if (!response.ok) {\r\n        if (response.status === 404) {\r\n          setSearchResultsUser([]); // No hay resultados\r\n          setShowUserResult(true);\r\n          return;\r\n        } else {\r\n          throw new Error('Failed to fetch users');\r\n        }\r\n      }\r\n      const data = await response.json();\r\n      setSearchResultsUser(data);\r\n      setShowUserResult(data.length > 0);\r\n    } catch (error) {\r\n      console.error('Error fetching users:', error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const leaveComment = async (postId) => {\r\n    try {\r\n      \r\n      // Crear el objeto de comentario\r\n      const commentData = {\r\n        content: newComments[postId],\r\n        userId: userId,\r\n        postId: postId, // Añadir el postId al objeto de comentario\r\n      };\r\n  \r\n      console.log('Request body:', commentData); // Imprimir el cuerpo de la solicitud en la consola\r\n      \r\n      const response = await fetch(`http://localhost:8000/posts/${postId}/comments`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(commentData), // Convertir el objeto en formato JSON y enviarlo en el cuerpo de la solicitud\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('Failed to leave a comment');\r\n      }\r\n      \r\n      // Extraer el comentario creado del cuerpo de la respuesta\r\n      const createdComment = await response.json();\r\n  \r\n      // Actualizar el estado de los comentarios de la publicación con el nombre de usuario\r\n      const username = await fetchUsernameById(userId);\r\n      const commentWithUsername = {\r\n        ...createdComment,\r\n        username,\r\n      };\r\n  \r\n      // Actualizar el estado de los comentarios de la publicación\r\n      setPostComments(prevComments => ({\r\n        ...prevComments,\r\n        [postId]: [...(prevComments[postId] || []), commentWithUsername],\r\n      }));\r\n      \r\n      // Limpiar el campo de comentario asociado a la publicación\r\n      setNewComments({\r\n        ...newComments,\r\n        [postId]: '',\r\n      });\r\n    } catch (error) {\r\n      console.error('Error leaving a comment:', error);\r\n    }\r\n  };\r\n  \r\n  \r\n  \r\n\r\n  // Función para manejar la creación de un nuevo post\r\n  const createNewPost = async () => {\r\n    try {\r\n\r\n      const response = await fetch('http://localhost:8000/posts', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          title,\r\n          content,\r\n          image,\r\n          userId\r\n        })\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error('Failed to create post');\r\n      }\r\n      // Recargar los posts después de crear uno nuevo\r\n      fetchAllPosts();\r\n      // Limpiar los campos del formulario después de crear el post\r\n      setTitle('');\r\n      setContent('');\r\n      setImage('');\r\n    } catch (error) {\r\n      console.error('Error creating post:', error);\r\n    }\r\n  };\r\n  \r\n  \r\n\r\n  // Función para manejar cambios en el campo de comentario\r\n  const handleCommentChange = (postId, comment) => {\r\n    setNewComments({\r\n      ...newComments,\r\n      [postId]: comment,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const updateCommentsWithUsername = async () => {\r\n      const updatedComments = {};\r\n      for (const postId in postComments) {\r\n        const commentsWithUsername = await Promise.all(postComments[postId].map(async (comment) => {\r\n          try {\r\n            const username = await fetchUsernameById(comment.userId);\r\n            return {\r\n              ...comment,\r\n              username,\r\n            };\r\n          } catch (error) {\r\n            console.error('Error fetching username:', error);\r\n            // Si hay un error al obtener el nombre de usuario, devolver el comentario sin nombre de usuario\r\n            return comment;\r\n          }\r\n        }));\r\n        updatedComments[postId] = commentsWithUsername;\r\n      }\r\n      // Actualizar el estado solo si el valor ha cambiado\r\n      if (JSON.stringify(updatedComments) !== JSON.stringify(postComments)) {\r\n        setPostComments(updatedComments);\r\n      }\r\n    };\r\n  \r\n    fetchAllPosts();\r\n    updateCommentsWithUsername();\r\n  }, []);\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"image-container\">\r\n        <img src=\"integram.png\" alt=\"Profile\" className=\"profile-image\" />\r\n      </div>\r\n\r\n      <div>\r\n        <h1>Boton para ver mi perfil:</h1>\r\n      <Link to={`/users/${currentUser.user.id}`}>\r\n        <button className=\"btn\">Ver mi perfil</button>\r\n      </Link>\r\n      </div>\r\n\r\n      <div className=\"search-bar\">\r\n        <h1>Barra de busqueda de publicacion:</h1>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Buscar publicación\"\r\n          value={searchTermPost}\r\n          onChange={(e) => setSearchTermPost(e.target.value)}\r\n          className=\"input\"\r\n        />\r\n        <button onClick={handleSearchPost} className=\"btn\">Buscar</button>\r\n      </div>\r\n\r\n      {showPostResult && (\r\n        <div>\r\n          <h2>Publicaciones encontradas:</h2>\r\n          <div className=\"posts-section\" style={{ maxHeight: '500px', overflowY: 'auto' }}>\r\n            {searchResultsPost.length > 0 ? (\r\n              searchResultsPost.map(post => (\r\n                <div key={post.id} className=\"post-container\">\r\n                  <div className=\"posts-container\">\r\n                    <div className=\"content\">\r\n                      <h3>Título: {post.title}</h3>\r\n                      <p>Descripción: {post.content}</p>\r\n                      <p>Autor: <Link to={`/users/${post.userId}`}>{post.username}</Link></p>\r\n                      {post.image && <img src={post.image} alt=\"Post\" className=\"image\" style={{ maxWidth: '100%', maxHeight: '200px' }} />}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"comments-container\">\r\n                    <p>Comentarios:</p>\r\n                    <div className=\"comments-list\">\r\n                      {postComments[post.id] && postComments[post.id].map((comment) => (\r\n                        <div key={comment.id}>\r\n                          <p>\r\n                            <strong>\r\n                              <Link to={`/users/${comment.userId}`}>\r\n                                {comment.username || 'Loading...'}\r\n                              </Link>\r\n                            </strong>: {comment.content}\r\n                          </p>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                    <div className=\"comment-input\">\r\n                      <input\r\n                        type=\"text\"\r\n                        placeholder=\"Deja un comentario...\"\r\n                        value={newComments[post.id] || ''}\r\n                        onChange={(e) => handleCommentChange(post.id, e.target.value)}\r\n                        className=\"input\"\r\n                      />\r\n                      <button onClick={() => leaveComment(post.id)} className=\"btn\">Comentar</button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <p>No hay publicaciones con ese título</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <h1>Barra de busqueda de usuario:</h1>\r\n\r\n      <div className=\"search-bar\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Buscar usuario\"\r\n          value={searchTermUser}\r\n          onChange={(e) => setSearchTermUser(e.target.value)}\r\n          className=\"input\"\r\n        />\r\n        <button onClick={handleSearchUser} className=\"btn\">Buscar</button>\r\n      </div>\r\n\r\n      {showUserResult && (\r\n        <div>\r\n          <h2>Usuarios encontrados:</h2>\r\n          {Array.isArray(searchResultsUser) && searchResultsUser.length > 0 ? (\r\n            <div>\r\n              {searchResultsUser.map(user => (\r\n                <Link key={user.id} to={`/users/${user.id}`}>\r\n                  <button className=\"btn\">{user.username}</button>\r\n                </Link>\r\n              ))}\r\n            </div>\r\n          ) : searchResultsUser === \"No hay resultados\" ? (\r\n            <p>No hay resultados</p>\r\n          ) : (\r\n            <p>No se encuentran usuarios con ese nombre</p>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      <h1 className=\"title\">Crear una nueva publicación</h1>\r\n\r\n      <div className=\"create-post\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Title\"\r\n          value={title}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n          className=\"input\"\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Content\"\r\n          value={content}\r\n          onChange={(e) => setContent(e.target.value)}\r\n          className=\"input\"\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Image URL\"\r\n          value={image}\r\n          onChange={(e) => setImage(e.target.value)}\r\n          className=\"input\"\r\n        />\r\n        <button onClick={createNewPost} className=\"btn\">Create Post</button>\r\n      </div>\r\n\r\n      <h1 className=\"title\">Publicaciones</h1>\r\n      <div className=\"posts-section\" style={{ maxHeight: '500px', overflowY: 'auto' }}>\r\n        {posts.map((post) => (\r\n          <div key={post.id} className=\"post-container\">\r\n            <div className=\"posts-container\">\r\n              <div className=\"content\">\r\n                <h3>Título: {post.title}</h3>\r\n                <p>Descripción: {post.content}</p>\r\n                <p>Autor: <Link to={`/users/${post.userId}`}>{post.username}</Link></p>\r\n                {post.image && <img src={post.image} alt=\"Post\" className=\"image\" style={{ maxWidth: '100%', maxHeight: '200px' }} />}\r\n              </div>\r\n            </div>\r\n            <div className=\"comments-container\">\r\n            <p>Comentarios:</p>\r\n            <div className=\"comments-list\">\r\n                {postComments[post.id] && postComments[post.id].map((comment) => (\r\n                  <div key={comment.id}>\r\n                    <p>\r\n                      <strong>\r\n                        <Link to={`/users/${comment.userId}`}>\r\n                          {comment.username || 'Loading...'}\r\n                        </Link>\r\n                      </strong>: {comment.content}\r\n                    </p>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n              <div className=\"comment-input\">\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Deja un comentario...\"\r\n                  value={newComments[post.id] || ''}\r\n                  onChange={(e) => handleCommentChange(post.id, e.target.value)}\r\n                  className=\"input\"\r\n                />\r\n                <button onClick={() => leaveComment(post.id)} className=\"btn\">Comentar</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomePage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}