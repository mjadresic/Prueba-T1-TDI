{"ast":null,"code":"var _jsxFileName = \"D:\\\\2024-1\\\\Taller de Integracion\\\\tarea-1-mjadresic\\\\frontend\\\\src\\\\components\\\\HomePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HomePage = () => {\n  _s();\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [image, setImage] = useState('');\n  const [posts, setPosts] = useState([]);\n  const [showPostResult, setShowPostResult] = useState(false);\n  const [showUserResult, setShowUserResult] = useState(false);\n  const [searchTermPost, setSearchTermPost] = useState('');\n  const [searchResultsPost, setSearchResultsPost] = useState([]);\n  const [searchTermUser, setSearchTermUser] = useState('');\n  const [searchResultsUser, setSearchResultsUser] = useState([]);\n  const [postComments, setPostComments] = useState({});\n  const [newComments, setNewComments] = useState({});\n  const currentUser = JSON.parse(localStorage.getItem('currentUser'));\n  const userId = currentUser.user.id;\n  const fetchAllPosts = async () => {\n    try {\n      const response = await fetch('https://tarea-1-mjadresic.onrender.com/posts');\n      if (!response.ok) {\n        throw new Error('Failed to fetch All posts');\n      }\n      const postData = await response.json();\n\n      // Obtener los nombres de usuario y avatares para cada ID de usuario en los posts\n      const postsWithUserData = await Promise.all(postData.map(async post => {\n        try {\n          const userResponse = await fetch(`https://tarea-1-mjadresic.onrender.com/users/${post.userId}`);\n          if (!userResponse.ok) {\n            throw new Error('Failed to fetch user data');\n          }\n          const userData = await userResponse.json();\n          return {\n            ...post,\n            username: userData.username,\n            userAvatar: userData.avatar // Agregar el avatar del usuario al post\n          };\n        } catch (error) {\n          console.error('Error fetching user data:', error);\n          return post;\n        }\n      }));\n\n      // Ordenar las publicaciones de más reciente a más antiguo\n      postsWithUserData.sort((a, b) => {\n        const dateA = new Date(a.created);\n        const dateB = new Date(b.created);\n        return dateB - dateA;\n      });\n\n      // Obtener comentarios de cada publicación\n      const comments = {};\n      for (const post of postsWithUserData) {\n        const commentsResponse = await fetch(`https://tarea-1-mjadresic.onrender.com/posts/${post.id}/comments`);\n        if (!commentsResponse.ok) {\n          throw new Error(`Failed to fetch comments for post ${post.id}`);\n        }\n        const postComments = await commentsResponse.json();\n\n        // Obtener el nombre de usuario y avatar para cada comentario\n        const commentsWithUserData = await Promise.all(postComments.map(async comment => {\n          try {\n            const userResponse = await fetch(`https://tarea-1-mjadresic.onrender.com/users/${comment.userId}`);\n            if (!userResponse.ok) {\n              throw new Error('Failed to fetch user data');\n            }\n            const userData = await userResponse.json();\n            return {\n              ...comment,\n              username: userData.username,\n              userAvatar: userData.avatar // Agregar el avatar del usuario al comentario\n            };\n          } catch (error) {\n            console.error('Error fetching user data:', error);\n            // Si hay un error al obtener los datos del usuario, devolver el comentario sin nombre de usuario ni avatar\n            return comment;\n          }\n        }));\n        comments[post.id] = commentsWithUserData;\n      }\n      setPosts(postsWithUserData);\n      setPostComments(comments); // Actualizar el estado con los comentarios que incluyen nombres de usuario y avatares\n    } catch (error) {\n      console.error('Error fetching All posts:', error);\n    }\n  };\n  const leaveComment = async postId => {\n    try {\n      // Crear el objeto de comentario\n      const commentData = {\n        content: newComments[postId],\n        userId: userId,\n        postId: postId // Añadir el postId al objeto de comentario\n      };\n      console.log('Request body:', commentData); // Imprimir el cuerpo de la solicitud en la consola\n\n      const response = await fetch(`https://tarea-1-mjadresic.onrender.com/posts/${postId}/comments`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(commentData) // Convertir el objeto en formato JSON y enviarlo en el cuerpo de la solicitud\n      });\n      if (!response.ok) {\n        throw new Error('Failed to leave a comment');\n      }\n\n      // Extraer el comentario creado del cuerpo de la respuesta\n      const createdComment = await response.json();\n\n      // Actualizar el estado de los comentarios de la publicación con el nombre de usuario\n      const userResponse = await fetch(`https://tarea-1-mjadresic.onrender.com/users/${userId}`);\n      if (!userResponse.ok) {\n        throw new Error('Failed to fetch user data');\n      }\n      const userData = await userResponse.json();\n      const commentWithUserData = {\n        ...createdComment,\n        username: userData.username,\n        userAvatar: userData.avatar // Agregar el avatar del usuario al comentario\n      };\n\n      // Actualizar el estado de los comentarios de la publicación\n      setPostComments(prevComments => ({\n        ...prevComments,\n        [postId]: [...(prevComments[postId] || []), commentWithUserData]\n      }));\n\n      // Limpiar el campo de comentario asociado a la publicación\n      setNewComments({\n        ...newComments,\n        [postId]: ''\n      });\n    } catch (error) {\n      console.error('Error leaving a comment:', error);\n    }\n  };\n\n  // Función para manejar la creación de un nuevo post\n  const createNewPost = async () => {\n    try {\n      const postData = {\n        title: image.trim() !== '' ? title : title + ' (No title provided)',\n        content,\n        userId,\n        image: image.trim() !== '' ? image : '(No image provided)'\n      };\n      const response = await fetch('https://tarea-1-mjadresic.onrender.com/posts', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create post');\n      }\n      // Recargar los posts después de crear uno nuevo\n      fetchAllPosts();\n      // Limpiar los campos del formulario después de crear el post\n      setTitle('');\n      setContent('');\n      setImage('');\n    } catch (error) {\n      console.error('Error creating post:', error);\n    }\n  };\n\n  // Función para manejar cambios en el campo de comentario\n  const handleCommentChange = (postId, comment) => {\n    setNewComments({\n      ...newComments,\n      [postId]: comment\n    });\n  };\n  useEffect(() => {\n    const updateCommentsWithUserData = async () => {\n      const updatedComments = {};\n      for (const postId in postComments) {\n        const commentsWithUserData = await Promise.all(postComments[postId].map(async comment => {\n          try {\n            const userResponse = await fetch(`https://tarea-1-mjadresic.onrender.com/users/${comment.userId}`);\n            if (!userResponse.ok) {\n              throw new Error('Failed to fetch user data');\n            }\n            const userData = await userResponse.json();\n            return {\n              ...comment,\n              username: userData.username,\n              userAvatar: userData.avatar // Agregar el avatar del usuario al comentario\n            };\n          } catch (error) {\n            console.error('Error fetching user data:', error);\n            // Si hay un error al obtener los datos del usuario, devolver el comentario sin nombre de usuario ni avatar\n            return comment;\n          }\n        }));\n        updatedComments[postId] = commentsWithUserData;\n      }\n      // Actualizar el estado solo si el valor ha cambiado\n      if (JSON.stringify(updatedComments) !== JSON.stringify(postComments)) {\n        setPostComments(updatedComments);\n      }\n    };\n    fetchAllPosts();\n    updateCommentsWithUserData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-container\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"integram.png\",\n        alt: \"Profile\",\n        className: \"profile-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Boton para ver mi perfil:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: `/users/${currentUser.user.id}`,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          children: \"Ver mi perfil\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/landing\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          children: \"Volver a la p\\xE1gina de inicio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Crear una nueva publicaci\\xF3n\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create-post\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Title\",\n        value: title,\n        onChange: e => setTitle(e.target.value),\n        className: \"input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Content\",\n        value: content,\n        onChange: e => setContent(e.target.value),\n        className: \"input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Image URL\",\n        value: image,\n        onChange: e => setImage(e.target.value),\n        className: \"input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: createNewPost,\n        className: \"btn\",\n        children: \"Create Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Publicaciones\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"posts-section\",\n      style: {\n        maxHeight: '500px',\n        overflowY: 'auto'\n      },\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"posts-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"T\\xEDtulo: \", post.title]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Descripci\\xF3n: \", post.content]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Autor: \", /*#__PURE__*/_jsxDEV(Link, {\n                to: `/users/${post.userId}`,\n                children: post.username\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 285,\n                columnNumber: 27\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Avatar:\", /*#__PURE__*/_jsxDEV(Link, {\n                to: `/users/${post.userId}`,\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: post.userAvatar,\n                  alt: \"Avatar\",\n                  style: {\n                    maxWidth: '50px',\n                    maxHeight: '50px'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 289,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 288,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 17\n            }, this), post.image && /*#__PURE__*/_jsxDEV(\"img\", {\n              src: post.image,\n              alt: \"Post\",\n              className: \"image\",\n              style: {\n                maxWidth: '100%',\n                maxHeight: '200px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 32\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Fecha de creaci\\xF3n: \", post.created]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comments-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Comentarios:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comments-list\",\n            children: postComments[post.id] && postComments[post.id].map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: /*#__PURE__*/_jsxDEV(Link, {\n                    to: `/users/${comment.userId}`,\n                    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                      src: comment.userAvatar,\n                      alt: \"Avatar\",\n                      style: {\n                        maxWidth: '30px',\n                        maxHeight: '30px',\n                        marginRight: '5px'\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 304,\n                      columnNumber: 27\n                    }, this), comment.username || 'Loading...']\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 303,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 302,\n                  columnNumber: 23\n                }, this), \": \", comment.content]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 301,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Fecha de creaci\\xF3n: \", comment.created]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 309,\n                columnNumber: 21\n              }, this)]\n            }, comment.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comment-input\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Deja un comentario...\",\n              value: newComments[post.id] || '',\n              onChange: e => handleCommentChange(post.id, e.target.value),\n              className: \"input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => leaveComment(post.id),\n              className: \"btn\",\n              children: \"Comentar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 13\n        }, this)]\n      }, post.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 5\n  }, this);\n};\n_s(HomePage, \"MBWcHG4jioLodStPC4RUcibs9eY=\");\n_c = HomePage;\nexport default HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useState","useEffect","Link","jsxDEV","_jsxDEV","HomePage","_s","title","setTitle","content","setContent","image","setImage","posts","setPosts","showPostResult","setShowPostResult","showUserResult","setShowUserResult","searchTermPost","setSearchTermPost","searchResultsPost","setSearchResultsPost","searchTermUser","setSearchTermUser","searchResultsUser","setSearchResultsUser","postComments","setPostComments","newComments","setNewComments","currentUser","JSON","parse","localStorage","getItem","userId","user","id","fetchAllPosts","response","fetch","ok","Error","postData","json","postsWithUserData","Promise","all","map","post","userResponse","userData","username","userAvatar","avatar","error","console","sort","a","b","dateA","Date","created","dateB","comments","commentsResponse","commentsWithUserData","comment","leaveComment","postId","commentData","log","method","headers","body","stringify","createdComment","commentWithUserData","prevComments","createNewPost","trim","handleCommentChange","updateCommentsWithUserData","updatedComments","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","to","type","placeholder","value","onChange","e","target","onClick","style","maxHeight","overflowY","maxWidth","marginRight","_c","$RefreshReg$"],"sources":["D:/2024-1/Taller de Integracion/tarea-1-mjadresic/frontend/src/components/HomePage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './styles.css'; \r\n\r\nconst HomePage = () => {\r\n  const [title, setTitle] = useState('');\r\n  const [content, setContent] = useState('');\r\n  const [image, setImage] = useState('');\r\n  const [posts, setPosts] = useState([]);\r\n  const [showPostResult, setShowPostResult] = useState(false);\r\n  const [showUserResult, setShowUserResult] = useState(false);\r\n  const [searchTermPost, setSearchTermPost] = useState('');\r\n  const [searchResultsPost, setSearchResultsPost] = useState([]);\r\n  const [searchTermUser, setSearchTermUser] = useState('');\r\n  const [searchResultsUser, setSearchResultsUser] = useState([]);\r\n  const [postComments, setPostComments] = useState({});\r\n  const [newComments, setNewComments] = useState({});\r\n\r\n  const currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n  const userId = currentUser.user.id;\r\n\r\n  const fetchAllPosts = async () => {\r\n    try {\r\n      const response = await fetch('https://tarea-1-mjadresic.onrender.com/posts');\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch All posts');\r\n      }\r\n      const postData = await response.json();\r\n  \r\n      // Obtener los nombres de usuario y avatares para cada ID de usuario en los posts\r\n      const postsWithUserData = await Promise.all(postData.map(async (post) => {\r\n        try {\r\n          const userResponse = await fetch(`https://tarea-1-mjadresic.onrender.com/users/${post.userId}`);\r\n          if (!userResponse.ok) {\r\n            throw new Error('Failed to fetch user data');\r\n          }\r\n          const userData = await userResponse.json();\r\n          return {\r\n            ...post,\r\n            username: userData.username,\r\n            userAvatar: userData.avatar // Agregar el avatar del usuario al post\r\n          };\r\n        } catch (error) {\r\n          console.error('Error fetching user data:', error);\r\n          return post; \r\n        }\r\n      }));\r\n  \r\n      // Ordenar las publicaciones de más reciente a más antiguo\r\n      postsWithUserData.sort((a, b) => {\r\n        const dateA = new Date(a.created);\r\n        const dateB = new Date(b.created);\r\n        return dateB - dateA;\r\n      });\r\n  \r\n      // Obtener comentarios de cada publicación\r\n      const comments = {};\r\n      for (const post of postsWithUserData) {\r\n        const commentsResponse = await fetch(`https://tarea-1-mjadresic.onrender.com/posts/${post.id}/comments`);\r\n        if (!commentsResponse.ok) {\r\n          throw new Error(`Failed to fetch comments for post ${post.id}`);\r\n        }\r\n        const postComments = await commentsResponse.json();\r\n        \r\n        // Obtener el nombre de usuario y avatar para cada comentario\r\n        const commentsWithUserData = await Promise.all(postComments.map(async (comment) => {\r\n          try {\r\n            const userResponse = await fetch(`https://tarea-1-mjadresic.onrender.com/users/${comment.userId}`);\r\n            if (!userResponse.ok) {\r\n              throw new Error('Failed to fetch user data');\r\n            }\r\n            const userData = await userResponse.json();\r\n            return {\r\n              ...comment,\r\n              username: userData.username,\r\n              userAvatar: userData.avatar // Agregar el avatar del usuario al comentario\r\n            };\r\n          } catch (error) {\r\n            console.error('Error fetching user data:', error);\r\n            // Si hay un error al obtener los datos del usuario, devolver el comentario sin nombre de usuario ni avatar\r\n            return comment;\r\n          }\r\n        }));\r\n  \r\n        comments[post.id] = commentsWithUserData;\r\n      }\r\n  \r\n      setPosts(postsWithUserData);\r\n      setPostComments(comments); // Actualizar el estado con los comentarios que incluyen nombres de usuario y avatares\r\n    } catch (error) {\r\n      console.error('Error fetching All posts:', error);\r\n    }\r\n  };\r\n\r\n  const leaveComment = async (postId) => {\r\n    try {\r\n      \r\n      // Crear el objeto de comentario\r\n      const commentData = {\r\n        content: newComments[postId],\r\n        userId: userId,\r\n        postId: postId, // Añadir el postId al objeto de comentario\r\n      };\r\n  \r\n      console.log('Request body:', commentData); // Imprimir el cuerpo de la solicitud en la consola\r\n      \r\n      const response = await fetch(`https://tarea-1-mjadresic.onrender.com/posts/${postId}/comments`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(commentData), // Convertir el objeto en formato JSON y enviarlo en el cuerpo de la solicitud\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('Failed to leave a comment');\r\n      }\r\n      \r\n      // Extraer el comentario creado del cuerpo de la respuesta\r\n      const createdComment = await response.json();\r\n  \r\n      // Actualizar el estado de los comentarios de la publicación con el nombre de usuario\r\n      const userResponse = await fetch(`https://tarea-1-mjadresic.onrender.com/users/${userId}`);\r\n      if (!userResponse.ok) {\r\n        throw new Error('Failed to fetch user data');\r\n      }\r\n      const userData = await userResponse.json();\r\n      const commentWithUserData = {\r\n        ...createdComment,\r\n        username: userData.username,\r\n        userAvatar: userData.avatar // Agregar el avatar del usuario al comentario\r\n      };\r\n  \r\n      // Actualizar el estado de los comentarios de la publicación\r\n      setPostComments(prevComments => ({\r\n        ...prevComments,\r\n        [postId]: [...(prevComments[postId] || []), commentWithUserData],\r\n      }));\r\n      \r\n      // Limpiar el campo de comentario asociado a la publicación\r\n      setNewComments({\r\n        ...newComments,\r\n        [postId]: '',\r\n      });\r\n    } catch (error) {\r\n      console.error('Error leaving a comment:', error);\r\n    }\r\n  };\r\n  \r\n  \r\n\r\n  // Función para manejar la creación de un nuevo post\r\n  const createNewPost = async () => {\r\n    try {\r\n      const postData = {\r\n        title: image.trim() !== '' ? title : title + ' (No title provided)',\r\n        content,\r\n        userId,\r\n        image: image.trim() !== '' ? image : '(No image provided)' \r\n      };\r\n  \r\n      const response = await fetch('https://tarea-1-mjadresic.onrender.com/posts', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(postData)\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error('Failed to create post');\r\n      }\r\n      // Recargar los posts después de crear uno nuevo\r\n      fetchAllPosts();\r\n      // Limpiar los campos del formulario después de crear el post\r\n      setTitle('');\r\n      setContent('');\r\n      setImage('');\r\n    } catch (error) {\r\n      console.error('Error creating post:', error);\r\n    }\r\n  };\r\n  \r\n  \r\n\r\n  // Función para manejar cambios en el campo de comentario\r\n  const handleCommentChange = (postId, comment) => {\r\n    setNewComments({\r\n      ...newComments,\r\n      [postId]: comment,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const updateCommentsWithUserData = async () => {\r\n      const updatedComments = {};\r\n      for (const postId in postComments) {\r\n        const commentsWithUserData = await Promise.all(postComments[postId].map(async (comment) => {\r\n          try {\r\n            const userResponse = await fetch(`https://tarea-1-mjadresic.onrender.com/users/${comment.userId}`);\r\n            if (!userResponse.ok) {\r\n              throw new Error('Failed to fetch user data');\r\n            }\r\n            const userData = await userResponse.json();\r\n            return {\r\n              ...comment,\r\n              username: userData.username,\r\n              userAvatar: userData.avatar // Agregar el avatar del usuario al comentario\r\n            };\r\n          } catch (error) {\r\n            console.error('Error fetching user data:', error);\r\n            // Si hay un error al obtener los datos del usuario, devolver el comentario sin nombre de usuario ni avatar\r\n            return comment;\r\n          }\r\n        }));\r\n        updatedComments[postId] = commentsWithUserData;\r\n      }\r\n      // Actualizar el estado solo si el valor ha cambiado\r\n      if (JSON.stringify(updatedComments) !== JSON.stringify(postComments)) {\r\n        setPostComments(updatedComments);\r\n      }\r\n    };\r\n  \r\n    fetchAllPosts();\r\n    updateCommentsWithUserData();\r\n  }, []);\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"image-container\">\r\n        <img src=\"integram.png\" alt=\"Profile\" className=\"profile-image\" />\r\n      </div>\r\n\r\n      <div>\r\n        <h1>Boton para ver mi perfil:</h1>\r\n      <Link to={`/users/${currentUser.user.id}`}>\r\n        <button className=\"btn\">Ver mi perfil</button>\r\n      </Link>\r\n      </div>\r\n\r\n      <div>\r\n    {/* Botón para volver a la landing page */}\r\n    <Link to=\"/landing\">\r\n      <button className=\"btn\">Volver a la página de inicio</button>\r\n    </Link>\r\n  </div>\r\n\r\n\r\n      <h1 className=\"title\">Crear una nueva publicación</h1>\r\n\r\n      <div className=\"create-post\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Title\"\r\n          value={title}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n          className=\"input\"\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Content\"\r\n          value={content}\r\n          onChange={(e) => setContent(e.target.value)}\r\n          className=\"input\"\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Image URL\"\r\n          value={image}\r\n          onChange={(e) => setImage(e.target.value)}\r\n          className=\"input\"\r\n        />\r\n        <button onClick={createNewPost} className=\"btn\">Create Post</button>\r\n      </div>\r\n\r\n      <h1 className=\"title\">Publicaciones</h1>\r\n      <div className=\"posts-section\" style={{ maxHeight: '500px', overflowY: 'auto' }}>\r\n        {posts.map((post) => (\r\n          <div key={post.id} className=\"post-container\">\r\n            <div className=\"posts-container\">\r\n              <div className=\"content\">\r\n                <h3>Título: {post.title}</h3>\r\n                <p>Descripción: {post.content}</p>\r\n                <p>Autor: <Link to={`/users/${post.userId}`}>{post.username}</Link></p>\r\n                <p>\r\n                  Avatar: \r\n                  <Link to={`/users/${post.userId}`}>\r\n                    <img src={post.userAvatar} alt=\"Avatar\" style={{ maxWidth: '50px', maxHeight: '50px' }} />\r\n                  </Link>\r\n                </p>\r\n                {post.image && <img src={post.image} alt=\"Post\" className=\"image\" style={{ maxWidth: '100%', maxHeight: '200px' }} />}\r\n                <p>Fecha de creación: {post.created}</p>\r\n              </div>\r\n            </div>\r\n            <div className=\"comments-container\">\r\n            <p>Comentarios:</p>\r\n            <div className=\"comments-list\">\r\n                {postComments[post.id] && postComments[post.id].map((comment) => (\r\n                  <div key={comment.id}>\r\n                    <p>\r\n                      <strong>\r\n                        <Link to={`/users/${comment.userId}`}>\r\n                          <img src={comment.userAvatar} alt=\"Avatar\" style={{ maxWidth: '30px', maxHeight: '30px', marginRight: '5px' }} />\r\n                          {comment.username || 'Loading...'}\r\n                        </Link>\r\n                      </strong>: {comment.content}\r\n                    </p>\r\n                    <p>Fecha de creación: {comment.created}</p>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n              <div className=\"comment-input\">\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Deja un comentario...\"\r\n                  value={newComments[post.id] || ''}\r\n                  onChange={(e) => handleCommentChange(post.id, e.target.value)}\r\n                  className=\"input\"\r\n                />\r\n                <button onClick={() => leaveComment(post.id)} className=\"btn\">Comentar</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomePage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}