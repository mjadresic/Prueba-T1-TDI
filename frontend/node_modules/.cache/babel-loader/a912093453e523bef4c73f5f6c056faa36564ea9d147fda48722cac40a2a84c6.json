{"ast":null,"code":"var _jsxFileName = \"D:\\\\2024-1\\\\Taller de Integracion\\\\Prueba-T1-TDI\\\\frontend\\\\src\\\\components\\\\ProfilePage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProfilePage = () => {\n  _s();\n  const {\n    userId\n  } = useParams();\n  const [user, setUser] = useState(null);\n  const [posts, setPosts] = useState([]);\n  const [postComments, setPostComments] = useState({});\n  const [newComments, setNewComments] = useState({});\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Obtener datos del usuario\n        const userResponse = await fetch(`https://prueba-t1-tdi.onrender.com/users/${userId}`);\n        if (!userResponse.ok) {\n          throw new Error('Failed to fetch user data');\n        }\n        const userData = await userResponse.json();\n        setUser(userData);\n\n        // Obtener publicaciones del usuario\n        const postsResponse = await fetch(`https://prueba-t1-tdi.onrender.com/posts`);\n        if (!postsResponse.ok) {\n          throw new Error('Failed to fetch user posts');\n        }\n        const allPosts = await postsResponse.json();\n        const userPosts = allPosts.filter(post => post.userId === parseInt(userId));\n\n        // Obtener el nombre de usuario para cada publicación\n        for (const post of userPosts) {\n          const userPostResponse = await fetch(`https://prueba-t1-tdi.onrender.com/users/${post.userId}`);\n          if (!userPostResponse.ok) {\n            throw new Error(`Failed to fetch user data for post ${post.id}`);\n          }\n          const postUserData = await userPostResponse.json();\n          post.username = postUserData.username; // Asignar el nombre de usuario a la publicación\n        }\n\n        // Ordenar las publicaciones de más nuevas a más viejas\n        userPosts.sort((a, b) => new Date(b.created) - new Date(a.created));\n        setPosts(userPosts);\n\n        // Obtener comentarios de las publicaciones\n        const comments = {};\n        for (const post of userPosts) {\n          console.log(`Fetching comments for post ${post.id}`);\n          const commentsResponse = await fetch(`https://prueba-t1-tdi.onrender.com/posts/${post.id}/comments`);\n          console.log(commentsResponse);\n          if (!commentsResponse.ok) {\n            throw new Error(`Failed to fetch comments for post ${post.id}`);\n          }\n          const postComments = await commentsResponse.json();\n\n          // Obtener el nombre de usuario para cada comentario\n          for (const comment of postComments) {\n            const commentUserResponse = await fetch(`https://prueba-t1-tdi.onrender.com/users/${comment.userId}`);\n            if (!commentUserResponse.ok) {\n              throw new Error(`Failed to fetch user data for comment ${comment.id}`);\n            }\n            const commentUserData = await commentUserResponse.json();\n            comment.username = commentUserData.username; // Asignar el nombre de usuario al comentario\n          }\n          comments[post.id] = postComments;\n        }\n        setPostComments(comments);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, [userId]);\n\n  // Función para manejar la creación de un nuevo comentario\n  const leaveComment = async postId => {\n    try {\n      const currentUser = JSON.parse(localStorage.getItem('currentUser'));\n      const userId = currentUser.user.id;\n\n      // Crear el objeto de comentario\n      const commentData = {\n        content: newComments[postId],\n        userId: userId,\n        postId: postId // Añadir el postId al objeto de comentario\n      };\n      console.log('Request body:', commentData); // Imprimir el cuerpo de la solicitud en la consola\n\n      const response = await fetch(`https://prueba-t1-tdi.onrender.com/posts/${postId}/comments`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(commentData) // Convertir el objeto en formato JSON y enviarlo en el cuerpo de la solicitud\n      });\n      if (!response.ok) {\n        throw new Error('Failed to leave a comment');\n      }\n\n      // Extraer el comentario creado del cuerpo de la respuesta\n      const createdComment = await response.json();\n\n      // Actualizar el estado de los comentarios de la publicación con el nombre de usuario\n      const username = await fetchUsernameById(userId);\n      const commentWithUsername = {\n        ...createdComment,\n        username\n      };\n\n      // Actualizar el estado de los comentarios de la publicación\n      setPostComments(prevComments => ({\n        ...prevComments,\n        [postId]: [...(prevComments[postId] || []), commentWithUsername]\n      }));\n\n      // Limpiar el campo de comentario asociado a la publicación\n      setNewComments({\n        ...newComments,\n        [postId]: ''\n      });\n    } catch (error) {\n      console.error('Error leaving a comment:', error);\n    }\n  };\n  const fetchUsernameById = async userId => {\n    try {\n      const response = await fetch(`https://prueba-t1-tdi.onrender.com/users/${userId}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch user data');\n      }\n      const userData = await response.json();\n      return userData.username;\n    } catch (error) {\n      console.error('Error fetching user data:', error);\n      return '';\n    }\n  };\n\n  // Función para manejar cambios en el campo de comentario\n  const handleCommentChange = (postId, comment) => {\n    setNewComments({\n      ...newComments,\n      [postId]: comment\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [user && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: user.avatar,\n          alt: \"Imagen de perfil\",\n          style: {\n            width: '200px',\n            height: '200px',\n            borderRadius: '50%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Nombre de Usuario: \", user.username]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/posts\",\n      className: \"btn\",\n      children: \"Volver a inicio\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Publicaciones\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"posts-section\",\n      style: {\n        maxHeight: '500px',\n        overflowY: 'auto'\n      },\n      children: posts.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Este usuario no tiene publicaciones.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }, this) : posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"posts-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"T\\xEDtulo: \", post.title]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Descripci\\xF3n: \", post.content]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Autor: \", /*#__PURE__*/_jsxDEV(Link, {\n                to: `/users/${post.userId}`,\n                children: post.username\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 19\n            }, this), post.image && /*#__PURE__*/_jsxDEV(\"img\", {\n              src: post.image,\n              alt: \"Post\",\n              className: \"image\",\n              style: {\n                maxWidth: '100%',\n                maxHeight: '200px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 34\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comments-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Comentarios:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comments-list\",\n            children: postComments[post.id] && postComments[post.id].map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [/*#__PURE__*/_jsxDEV(Link, {\n                    to: `/users/${comment.userId}`,\n                    children: comment.username || 'Loading...'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 189,\n                    columnNumber: 34\n                  }, this), \":\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 189,\n                  columnNumber: 26\n                }, this), \" \", comment.content]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 23\n              }, this)\n            }, comment.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comment-input\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Deja un comentario...\",\n              value: newComments[post.id] || '',\n              onChange: e => handleCommentChange(post.id, e.target.value),\n              className: \"input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => leaveComment(post.id),\n              className: \"btn\",\n              children: \"Comentar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 15\n        }, this)]\n      }, post.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n};\n_s(ProfilePage, \"zzghokZwONQzdzHbPrgf62TPnQc=\", false, function () {\n  return [useParams];\n});\n_c = ProfilePage;\nexport default ProfilePage;\nvar _c;\n$RefreshReg$(_c, \"ProfilePage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","Link","jsxDEV","_jsxDEV","ProfilePage","_s","userId","user","setUser","posts","setPosts","postComments","setPostComments","newComments","setNewComments","fetchData","userResponse","fetch","ok","Error","userData","json","postsResponse","allPosts","userPosts","filter","post","parseInt","userPostResponse","id","postUserData","username","sort","a","b","Date","created","comments","console","log","commentsResponse","comment","commentUserResponse","commentUserData","error","leaveComment","postId","currentUser","JSON","parse","localStorage","getItem","commentData","content","response","method","headers","body","stringify","createdComment","fetchUsernameById","commentWithUsername","prevComments","handleCommentChange","className","children","src","avatar","alt","style","width","height","borderRadius","fileName","_jsxFileName","lineNumber","columnNumber","to","maxHeight","overflowY","length","map","title","image","maxWidth","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["D:/2024-1/Taller de Integracion/Prueba-T1-TDI/frontend/src/components/ProfilePage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport './styles.css';\r\n\r\nconst ProfilePage = () => {\r\n  const { userId } = useParams(); \r\n  const [user, setUser] = useState(null);\r\n  const [posts, setPosts] = useState([]);\r\n  const [postComments, setPostComments] = useState({});\r\n  const [newComments, setNewComments] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        // Obtener datos del usuario\r\n        const userResponse = await fetch(`https://prueba-t1-tdi.onrender.com/users/${userId}`);\r\n        if (!userResponse.ok) {\r\n          throw new Error('Failed to fetch user data');\r\n        }\r\n        const userData = await userResponse.json();\r\n        setUser(userData);\r\n  \r\n        // Obtener publicaciones del usuario\r\n        const postsResponse = await fetch(`https://prueba-t1-tdi.onrender.com/posts`);\r\n        if (!postsResponse.ok) {\r\n          throw new Error('Failed to fetch user posts');\r\n        }\r\n\r\n        const allPosts = await postsResponse.json();\r\n        const userPosts = allPosts.filter(post => post.userId === parseInt(userId));\r\n        \r\n        // Obtener el nombre de usuario para cada publicación\r\n        for (const post of userPosts) {\r\n          const userPostResponse = await fetch(`https://prueba-t1-tdi.onrender.com/users/${post.userId}`);\r\n          if (!userPostResponse.ok) {\r\n            throw new Error(`Failed to fetch user data for post ${post.id}`);\r\n          }\r\n          const postUserData = await userPostResponse.json();\r\n          post.username = postUserData.username; // Asignar el nombre de usuario a la publicación\r\n        }\r\n        \r\n        // Ordenar las publicaciones de más nuevas a más viejas\r\n        userPosts.sort((a, b) => new Date(b.created) - new Date(a.created));\r\n        setPosts(userPosts);\r\n        \r\n        // Obtener comentarios de las publicaciones\r\n        const comments = {};\r\n        for (const post of userPosts) {\r\n          console.log(`Fetching comments for post ${post.id}`);\r\n          const commentsResponse = await fetch(`https://prueba-t1-tdi.onrender.com/posts/${post.id}/comments`);\r\n          console.log(commentsResponse);\r\n          if (!commentsResponse.ok) {\r\n            throw new Error(`Failed to fetch comments for post ${post.id}`);\r\n          }\r\n          const postComments = await commentsResponse.json();\r\n          \r\n          // Obtener el nombre de usuario para cada comentario\r\n          for (const comment of postComments) {\r\n            const commentUserResponse = await fetch(`https://prueba-t1-tdi.onrender.com/users/${comment.userId}`);\r\n            if (!commentUserResponse.ok) {\r\n              throw new Error(`Failed to fetch user data for comment ${comment.id}`);\r\n            }\r\n            const commentUserData = await commentUserResponse.json();\r\n            comment.username = commentUserData.username; // Asignar el nombre de usuario al comentario\r\n          }\r\n\r\n          comments[post.id] = postComments;\r\n        }\r\n        setPostComments(comments);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n  \r\n    fetchData();\r\n  }, [userId]);\r\n  \r\n\r\n  // Función para manejar la creación de un nuevo comentario\r\n  const leaveComment = async (postId) => {\r\n    try {\r\n      const currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n      const userId = currentUser.user.id;\r\n      \r\n      // Crear el objeto de comentario\r\n      const commentData = {\r\n        content: newComments[postId],\r\n        userId: userId,\r\n        postId: postId, // Añadir el postId al objeto de comentario\r\n      };\r\n  \r\n      console.log('Request body:', commentData); // Imprimir el cuerpo de la solicitud en la consola\r\n      \r\n      const response = await fetch(`https://prueba-t1-tdi.onrender.com/posts/${postId}/comments`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(commentData), // Convertir el objeto en formato JSON y enviarlo en el cuerpo de la solicitud\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('Failed to leave a comment');\r\n      }\r\n      \r\n      // Extraer el comentario creado del cuerpo de la respuesta\r\n      const createdComment = await response.json();\r\n  \r\n      // Actualizar el estado de los comentarios de la publicación con el nombre de usuario\r\n      const username = await fetchUsernameById(userId);\r\n      const commentWithUsername = {\r\n        ...createdComment,\r\n        username,\r\n      };\r\n  \r\n      // Actualizar el estado de los comentarios de la publicación\r\n      setPostComments(prevComments => ({\r\n        ...prevComments,\r\n        [postId]: [...(prevComments[postId] || []), commentWithUsername],\r\n      }));\r\n      \r\n      // Limpiar el campo de comentario asociado a la publicación\r\n      setNewComments({\r\n        ...newComments,\r\n        [postId]: '',\r\n      });\r\n    } catch (error) {\r\n      console.error('Error leaving a comment:', error);\r\n    }\r\n  };\r\n\r\n  const fetchUsernameById = async (userId) => {\r\n    try {\r\n      const response = await fetch(`https://prueba-t1-tdi.onrender.com/users/${userId}`);\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch user data');\r\n      }\r\n      const userData = await response.json();\r\n      return userData.username;\r\n    } catch (error) {\r\n      console.error('Error fetching user data:', error);\r\n      return ''; \r\n    }\r\n  };\r\n  \r\n  // Función para manejar cambios en el campo de comentario\r\n  const handleCommentChange = (postId, comment) => {\r\n    setNewComments({\r\n      ...newComments,\r\n      [postId]: comment,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {user && (\r\n        <div className=\"content\">\r\n          <div className=\"image\">\r\n            <img src={user.avatar} alt=\"Imagen de perfil\" style={{ width: '200px', height: '200px', borderRadius: '50%' }} />\r\n          </div>\r\n          <div>\r\n            <h2>Nombre de Usuario: {user.username}</h2>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <Link to=\"/posts\" className=\"btn\">Volver a inicio</Link>\r\n\r\n      <h1 className=\"title\">Publicaciones</h1>\r\n      <div className=\"posts-section\" style={{ maxHeight: '500px', overflowY: 'auto' }}>\r\n        {posts.length === 0 ? (\r\n          <p>Este usuario no tiene publicaciones.</p>\r\n        ) : (\r\n          posts.map((post) => (\r\n            <div key={post.id} className=\"post-container\">\r\n              <div className=\"posts-container\">\r\n                <div className=\"content\">\r\n                  <h3>Título: {post.title}</h3>\r\n                  <p>Descripción: {post.content}</p>\r\n                  <p>Autor: <Link to={`/users/${post.userId}`}>{post.username}</Link></p>\r\n                  {post.image && <img src={post.image} alt=\"Post\" className=\"image\" style={{ maxWidth: '100%', maxHeight: '200px' }} />}\r\n                </div>\r\n              </div>\r\n              <div className=\"comments-container\">\r\n                <p>Comentarios:</p>\r\n                <div className=\"comments-list\">\r\n                  {postComments[post.id] && postComments[post.id].map((comment) => (\r\n                    <div key={comment.id}>\r\n                      <p><strong><Link to={`/users/${comment.userId}`}>{comment.username || 'Loading...'}</Link>:</strong> {comment.content}</p>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n                <div className=\"comment-input\">\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"Deja un comentario...\"\r\n                    value={newComments[post.id] || ''}\r\n                    onChange={(e) => handleCommentChange(post.id, e.target.value)}\r\n                    className=\"input\"\r\n                  />\r\n                  <button onClick={() => leaveComment(post.id)} className=\"btn\">Comentar</button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfilePage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,IAAI,QAAQ,kBAAkB;AAClD,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtB,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM;IAAEC;EAAO,CAAC,GAAGN,SAAS,CAAC,CAAC;EAC9B,MAAM,CAACO,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpD,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC,CAAC;EAElDD,SAAS,CAAC,MAAM;IACd,MAAMiB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF;QACA,MAAMC,YAAY,GAAG,MAAMC,KAAK,CAAE,4CAA2CX,MAAO,EAAC,CAAC;QACtF,IAAI,CAACU,YAAY,CAACE,EAAE,EAAE;UACpB,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;QAC9C;QACA,MAAMC,QAAQ,GAAG,MAAMJ,YAAY,CAACK,IAAI,CAAC,CAAC;QAC1Cb,OAAO,CAACY,QAAQ,CAAC;;QAEjB;QACA,MAAME,aAAa,GAAG,MAAML,KAAK,CAAE,0CAAyC,CAAC;QAC7E,IAAI,CAACK,aAAa,CAACJ,EAAE,EAAE;UACrB,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;QAC/C;QAEA,MAAMI,QAAQ,GAAG,MAAMD,aAAa,CAACD,IAAI,CAAC,CAAC;QAC3C,MAAMG,SAAS,GAAGD,QAAQ,CAACE,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACpB,MAAM,KAAKqB,QAAQ,CAACrB,MAAM,CAAC,CAAC;;QAE3E;QACA,KAAK,MAAMoB,IAAI,IAAIF,SAAS,EAAE;UAC5B,MAAMI,gBAAgB,GAAG,MAAMX,KAAK,CAAE,4CAA2CS,IAAI,CAACpB,MAAO,EAAC,CAAC;UAC/F,IAAI,CAACsB,gBAAgB,CAACV,EAAE,EAAE;YACxB,MAAM,IAAIC,KAAK,CAAE,sCAAqCO,IAAI,CAACG,EAAG,EAAC,CAAC;UAClE;UACA,MAAMC,YAAY,GAAG,MAAMF,gBAAgB,CAACP,IAAI,CAAC,CAAC;UAClDK,IAAI,CAACK,QAAQ,GAAGD,YAAY,CAACC,QAAQ,CAAC,CAAC;QACzC;;QAEA;QACAP,SAAS,CAACQ,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACD,CAAC,CAACE,OAAO,CAAC,GAAG,IAAID,IAAI,CAACF,CAAC,CAACG,OAAO,CAAC,CAAC;QACnE1B,QAAQ,CAACc,SAAS,CAAC;;QAEnB;QACA,MAAMa,QAAQ,GAAG,CAAC,CAAC;QACnB,KAAK,MAAMX,IAAI,IAAIF,SAAS,EAAE;UAC5Bc,OAAO,CAACC,GAAG,CAAE,8BAA6Bb,IAAI,CAACG,EAAG,EAAC,CAAC;UACpD,MAAMW,gBAAgB,GAAG,MAAMvB,KAAK,CAAE,4CAA2CS,IAAI,CAACG,EAAG,WAAU,CAAC;UACpGS,OAAO,CAACC,GAAG,CAACC,gBAAgB,CAAC;UAC7B,IAAI,CAACA,gBAAgB,CAACtB,EAAE,EAAE;YACxB,MAAM,IAAIC,KAAK,CAAE,qCAAoCO,IAAI,CAACG,EAAG,EAAC,CAAC;UACjE;UACA,MAAMlB,YAAY,GAAG,MAAM6B,gBAAgB,CAACnB,IAAI,CAAC,CAAC;;UAElD;UACA,KAAK,MAAMoB,OAAO,IAAI9B,YAAY,EAAE;YAClC,MAAM+B,mBAAmB,GAAG,MAAMzB,KAAK,CAAE,4CAA2CwB,OAAO,CAACnC,MAAO,EAAC,CAAC;YACrG,IAAI,CAACoC,mBAAmB,CAACxB,EAAE,EAAE;cAC3B,MAAM,IAAIC,KAAK,CAAE,yCAAwCsB,OAAO,CAACZ,EAAG,EAAC,CAAC;YACxE;YACA,MAAMc,eAAe,GAAG,MAAMD,mBAAmB,CAACrB,IAAI,CAAC,CAAC;YACxDoB,OAAO,CAACV,QAAQ,GAAGY,eAAe,CAACZ,QAAQ,CAAC,CAAC;UAC/C;UAEAM,QAAQ,CAACX,IAAI,CAACG,EAAE,CAAC,GAAGlB,YAAY;QAClC;QACAC,eAAe,CAACyB,QAAQ,CAAC;MAC3B,CAAC,CAAC,OAAOO,KAAK,EAAE;QACdN,OAAO,CAACM,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAED7B,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACT,MAAM,CAAC,CAAC;;EAGZ;EACA,MAAMuC,YAAY,GAAG,MAAOC,MAAM,IAAK;IACrC,IAAI;MACF,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC;MACnE,MAAM7C,MAAM,GAAGyC,WAAW,CAACxC,IAAI,CAACsB,EAAE;;MAElC;MACA,MAAMuB,WAAW,GAAG;QAClBC,OAAO,EAAExC,WAAW,CAACiC,MAAM,CAAC;QAC5BxC,MAAM,EAAEA,MAAM;QACdwC,MAAM,EAAEA,MAAM,CAAE;MAClB,CAAC;MAEDR,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEa,WAAW,CAAC,CAAC,CAAC;;MAE3C,MAAME,QAAQ,GAAG,MAAMrC,KAAK,CAAE,4CAA2C6B,MAAO,WAAU,EAAE;QAC1FS,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAET,IAAI,CAACU,SAAS,CAACN,WAAW,CAAC,CAAE;MACrC,CAAC,CAAC;MAEF,IAAI,CAACE,QAAQ,CAACpC,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;MAC9C;;MAEA;MACA,MAAMwC,cAAc,GAAG,MAAML,QAAQ,CAACjC,IAAI,CAAC,CAAC;;MAE5C;MACA,MAAMU,QAAQ,GAAG,MAAM6B,iBAAiB,CAACtD,MAAM,CAAC;MAChD,MAAMuD,mBAAmB,GAAG;QAC1B,GAAGF,cAAc;QACjB5B;MACF,CAAC;;MAED;MACAnB,eAAe,CAACkD,YAAY,KAAK;QAC/B,GAAGA,YAAY;QACf,CAAChB,MAAM,GAAG,CAAC,IAAIgB,YAAY,CAAChB,MAAM,CAAC,IAAI,EAAE,CAAC,EAAEe,mBAAmB;MACjE,CAAC,CAAC,CAAC;;MAEH;MACA/C,cAAc,CAAC;QACb,GAAGD,WAAW;QACd,CAACiC,MAAM,GAAG;MACZ,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOF,KAAK,EAAE;MACdN,OAAO,CAACM,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD;EACF,CAAC;EAED,MAAMgB,iBAAiB,GAAG,MAAOtD,MAAM,IAAK;IAC1C,IAAI;MACF,MAAMgD,QAAQ,GAAG,MAAMrC,KAAK,CAAE,4CAA2CX,MAAO,EAAC,CAAC;MAClF,IAAI,CAACgD,QAAQ,CAACpC,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;MAC9C;MACA,MAAMC,QAAQ,GAAG,MAAMkC,QAAQ,CAACjC,IAAI,CAAC,CAAC;MACtC,OAAOD,QAAQ,CAACW,QAAQ;IAC1B,CAAC,CAAC,OAAOa,KAAK,EAAE;MACdN,OAAO,CAACM,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,OAAO,EAAE;IACX;EACF,CAAC;;EAED;EACA,MAAMmB,mBAAmB,GAAGA,CAACjB,MAAM,EAAEL,OAAO,KAAK;IAC/C3B,cAAc,CAAC;MACb,GAAGD,WAAW;MACd,CAACiC,MAAM,GAAGL;IACZ,CAAC,CAAC;EACJ,CAAC;EAED,oBACEtC,OAAA;IAAK6D,SAAS,EAAC,WAAW;IAAAC,QAAA,GACvB1D,IAAI,iBACHJ,OAAA;MAAK6D,SAAS,EAAC,SAAS;MAAAC,QAAA,gBACtB9D,OAAA;QAAK6D,SAAS,EAAC,OAAO;QAAAC,QAAA,eACpB9D,OAAA;UAAK+D,GAAG,EAAE3D,IAAI,CAAC4D,MAAO;UAACC,GAAG,EAAC,kBAAkB;UAACC,KAAK,EAAE;YAAEC,KAAK,EAAE,OAAO;YAAEC,MAAM,EAAE,OAAO;YAAEC,YAAY,EAAE;UAAM;QAAE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9G,CAAC,eACNzE,OAAA;QAAA8D,QAAA,eACE9D,OAAA;UAAA8D,QAAA,GAAI,qBAAmB,EAAC1D,IAAI,CAACwB,QAAQ;QAAA;UAAA0C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN,eAEDzE,OAAA,CAACF,IAAI;MAAC4E,EAAE,EAAC,QAAQ;MAACb,SAAS,EAAC,KAAK;MAAAC,QAAA,EAAC;IAAe;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAExDzE,OAAA;MAAI6D,SAAS,EAAC,OAAO;MAAAC,QAAA,EAAC;IAAa;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxCzE,OAAA;MAAK6D,SAAS,EAAC,eAAe;MAACK,KAAK,EAAE;QAAES,SAAS,EAAE,OAAO;QAAEC,SAAS,EAAE;MAAO,CAAE;MAAAd,QAAA,EAC7ExD,KAAK,CAACuE,MAAM,KAAK,CAAC,gBACjB7E,OAAA;QAAA8D,QAAA,EAAG;MAAoC;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,GAE3CnE,KAAK,CAACwE,GAAG,CAAEvD,IAAI,iBACbvB,OAAA;QAAmB6D,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBAC3C9D,OAAA;UAAK6D,SAAS,EAAC,iBAAiB;UAAAC,QAAA,eAC9B9D,OAAA;YAAK6D,SAAS,EAAC,SAAS;YAAAC,QAAA,gBACtB9D,OAAA;cAAA8D,QAAA,GAAI,aAAQ,EAACvC,IAAI,CAACwD,KAAK;YAAA;cAAAT,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eAC7BzE,OAAA;cAAA8D,QAAA,GAAG,kBAAa,EAACvC,IAAI,CAAC2B,OAAO;YAAA;cAAAoB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAClCzE,OAAA;cAAA8D,QAAA,GAAG,SAAO,eAAA9D,OAAA,CAACF,IAAI;gBAAC4E,EAAE,EAAG,UAASnD,IAAI,CAACpB,MAAO,EAAE;gBAAA2D,QAAA,EAAEvC,IAAI,CAACK;cAAQ;gBAAA0C,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG,CAAC,EACtElD,IAAI,CAACyD,KAAK,iBAAIhF,OAAA;cAAK+D,GAAG,EAAExC,IAAI,CAACyD,KAAM;cAACf,GAAG,EAAC,MAAM;cAACJ,SAAS,EAAC,OAAO;cAACK,KAAK,EAAE;gBAAEe,QAAQ,EAAE,MAAM;gBAAEN,SAAS,EAAE;cAAQ;YAAE;cAAAL,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAClH;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eACNzE,OAAA;UAAK6D,SAAS,EAAC,oBAAoB;UAAAC,QAAA,gBACjC9D,OAAA;YAAA8D,QAAA,EAAG;UAAY;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eACnBzE,OAAA;YAAK6D,SAAS,EAAC,eAAe;YAAAC,QAAA,EAC3BtD,YAAY,CAACe,IAAI,CAACG,EAAE,CAAC,IAAIlB,YAAY,CAACe,IAAI,CAACG,EAAE,CAAC,CAACoD,GAAG,CAAExC,OAAO,iBAC1DtC,OAAA;cAAA8D,QAAA,eACE9D,OAAA;gBAAA8D,QAAA,gBAAG9D,OAAA;kBAAA8D,QAAA,gBAAQ9D,OAAA,CAACF,IAAI;oBAAC4E,EAAE,EAAG,UAASpC,OAAO,CAACnC,MAAO,EAAE;oBAAA2D,QAAA,EAAExB,OAAO,CAACV,QAAQ,IAAI;kBAAY;oBAAA0C,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAO,CAAC,KAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,KAAC,EAACnC,OAAO,CAACY,OAAO;cAAA;gBAAAoB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI;YAAC,GADlHnC,OAAO,CAACZ,EAAE;cAAA4C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAEf,CACN;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC,eACNzE,OAAA;YAAK6D,SAAS,EAAC,eAAe;YAAAC,QAAA,gBAC5B9D,OAAA;cACEkF,IAAI,EAAC,MAAM;cACXC,WAAW,EAAC,uBAAuB;cACnCC,KAAK,EAAE1E,WAAW,CAACa,IAAI,CAACG,EAAE,CAAC,IAAI,EAAG;cAClC2D,QAAQ,EAAGC,CAAC,IAAK1B,mBAAmB,CAACrC,IAAI,CAACG,EAAE,EAAE4D,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;cAC9DvB,SAAS,EAAC;YAAO;cAAAS,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAClB,CAAC,eACFzE,OAAA;cAAQwF,OAAO,EAAEA,CAAA,KAAM9C,YAAY,CAACnB,IAAI,CAACG,EAAE,CAAE;cAACmC,SAAS,EAAC,KAAK;cAAAC,QAAA,EAAC;YAAQ;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC5E,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA,GA5BElD,IAAI,CAACG,EAAE;QAAA4C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OA6BZ,CACN;IACF;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACvE,EAAA,CA7MID,WAAW;EAAA,QACIJ,SAAS;AAAA;AAAA4F,EAAA,GADxBxF,WAAW;AA+MjB,eAAeA,WAAW;AAAC,IAAAwF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}